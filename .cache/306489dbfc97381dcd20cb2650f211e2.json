{"dependencies":[{"name":"./scss/styles.scss","dynamic":true},{"name":"./index.js","dynamic":true}],"generated":{"html":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <meta name=\"keywords\" content=\"Uberflip, Onbrand, Mark Wilkins, Mark, Wilkins, Documentation, Docs, developer\"> <meta name=\"robots\" content=\"index, follow\"> <meta name=\"revisit-after\" content=\"3 month\"> <meta name=\"language\" content=\"English\"> <meta name=\"author\" content=\"Mark Wilkins\">  <meta charset=\"utf-8\"> <title>Mark's Onbrand Project Documenation</title>  <meta name=\"description\" content=\"This page contains information on where to find, and how to use, the various tools I have built for the Onbrand Team at Uberflip.\"> <meta name=\"image\" content=\"http://markwilkins.co/public/assets/logo.svg\">  <meta itemprop=\"name\" content=\"Mark's Onbrand Project Documenation\"> <meta itemprop=\"description\" content=\"This page contains information on where to find, and how to use, the various tools I have built for the Onbrand Team at Uberflip.\"> <meta itemprop=\"image\" content=\"http://markwilkins.co/public/assets/logo.svg\">  <meta name=\"twitter:card\" content=\"summary\"> <meta name=\"twitter:title\" content=\"Mark's Onbrand Project Documenation\"> <meta name=\"twitter:description\" content=\"This page contains information on where to find, and how to use, the various tools I have built for the Onbrand Team at Uberflip.\"> <meta name=\"twitter:site\" content=\"@MarkWilkinsWeb\"> <meta name=\"twitter:creator\" content=\"@MarkWilkinsWeb\"> <meta name=\"twitter:image:src\" content=\"http://markwilkins.co/public/assets/logo.svg\">  <meta name=\"og:title\" content=\"Mark's Onbrand Project Documenation\"> <meta name=\"og:description\" content=\"This page contains information on where to find, and how to use, the various tools I have built for the Onbrand Team at Uberflip.\"> <meta name=\"og:image\" content=\"http://markwilkins.co/public/assets/logo.svg\"> <meta name=\"og:url\" content=\"http://markwilkins.co/documentation/onbrand\"> <meta name=\"og:site_name\" content=\"Mark's Onbrand Project Documenation\"> <meta name=\"og:type\" content=\"website\">  <meta name=\"copyright\" content=\"Mark Wilkins &copy;2018\"> <link rel=\"stylesheet\" href=\"/dist/995ca88ab200ef478d84ced549e11410.css\"> <link rel=\"shortcut icon\" href=\"http://markwilkins.co/public/assets/favicon.ico\" type=\"image/x-icon\"> <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-57x57.png\"> <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-60x60.png\"> <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-72x72.png\"> <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-76x76.png\"> <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-114x114.png\"> <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-120x120.png\"> <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-144x144.png\"> <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-152x152.png\"> <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"http://markwilkins.co/public/assets/apple-touch-icon-180x180.png\"> <link rel=\"icon\" type=\"image/png\" href=\"http://markwilkins.co/public/assets/favicon-16x16.png\" sizes=\"16x16\"> <link rel=\"icon\" type=\"image/png\" href=\"http://markwilkins.co/public/assets/favicon-32x32.png\" sizes=\"32x32\"> <link rel=\"icon\" type=\"image/png\" href=\"http://markwilkins.co/public/assets/favicon-96x96.png\" sizes=\"96x96\"> <link rel=\"icon\" type=\"image/png\" href=\"http://markwilkins.co/public/assets/android-chrome-192x192.png\" sizes=\"192x192\"> <meta name=\"msapplication-square70x70logo\" content=\"http://markwilkins.co/public/assets/smalltile.png\"> <meta name=\"msapplication-square150x150logo\" content=\"http://markwilkins.co/public/assets/mediumtile.png\"> <meta name=\"msapplication-wide310x150logo\" content=\"http://markwilkins.co/public/assets/widetile.png\"> <meta name=\"msapplication-square310x310logo\" content=\"http://markwilkins.co/public/assets/largetile.png\"> </head> <body> <section class=\"section\"> <div class=\"container\"> <h1 class=\"title\">Mark's Onbrand Projects</h1> <h2 class=\"subtitle\"> Hopefully everything you might need to know or find about the stuff I've built. </h2> <section class=\"columns\"> <aside class=\" column menu\"> <p class=\"menu-label\"> Project Resources </p> <ul class=\"menu-list\"> <li> <a class=\"inPageLink is-active\" data-for=\"repositories\">Repositories</a> <ul class=\"sub-menu\"> <li> <a href=\"#onbrandAssetObtainer-repositories\"> Asset Obtainer</a> <a href=\"#onbrandUtilityFunctions-repositories\">Utility Functions</a> <a href=\"#onbrandLocalDevelopmentFrameworks-repositories\">Local Development</a> <a href=\"#onbrandProjectGenerator-repositories\">Project Generator</a> <a href=\"#onbrandSlackBot-repositories\">Slack Bot</a> </li> </ul> </li> <li> <a class=\"inPageLink\" data-for=\"npmPage\">NPM</a> <ul style=\"display:none\" class=\"sub-menu\"> <li> <a href=\"#onbrandAssetObtainer-npmPage\"> Asset Obtainer</a> <a href=\"#onbrandUtilityFunctions-npmPage\">Utility Functions</a> <a href=\"#onbrandProjectGenerator-npmPage\">Project Generator</a> </li> </ul> </li> <li> <a class=\"inPageLink\" data-for=\"docs\">Documentation</a> <ul style=\"display:none\" class=\"sub-menu\"> <li> <a href=\"#onbrandAssetObtainer-docs\"> Asset Obtainer</a> <a href=\"#onbrandUtilityFunctions-docs\">Utility Functions</a> <a href=\"#onbrandLocalDevelopmentFrameworks-docs\">Local Development</a> <a href=\"#onbrandProjectGenerator-docs\">Project Generator</a> <a href=\"#onbrandSlackBot-docs\">Slack Bot</a> </li> </ul> </li> </ul> <p class=\"menu-label\"> How To's </p> <ul class=\"menu-list\"> <li> <a href=\"#newOBProj\" class=\"inPageLink\" data-for=\"newOBProj\">Set up a new onbrand project</a> </li> <li> <a href=\"#updateTemplate\" class=\"inPageLink\" data-for=\"updateTemplate\">Update a framework template</a> </li> <li> <a href=\"#updateUtilityFuncs\" class=\"inPageLink\" data-for=\"updateUtilityFuncs\">Update Utility Functions</a> </li> </ul> </aside> <main class=\"column\"> <article id=\"repositories\" class=\"content cardsList\"> <ul> <li id=\"onbrandAssetObtainer-repositories\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Asset Obtainer</h4> <p class=\"content\"> The repository for the program typically run via the \"steal\" command. Used to grab all styles from a particular website, and save them in the appropriate order in your client.scss. It also attempts to prevent conflits by namespacing. </p> <a href=\"https://github.com/mwilkins91/onbrand-assetObtainer\" class=\"block\">Github</a> </div> </li> <li id=\"onbrandUtilityFunctions-repositories\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Utility Functions</h4> <p class=\"content\"> The repository for the library which houses various reusable fuctions that make Onbranding a hub much easier, and eliminates various bugs. Also contains various SCSS functions. </p> <a href=\"https://github.com/mwilkins91/onbrand-utilityfunctions\" class=\"block\">Github</a> </div> </li> <li id=\"onbrandLocalDevelopmentFrameworks-repositories\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Local Development Frameworks</h4> <p class=\"content\"> The two branches of this repository contain two different frameworks for developing hubs on a local machine. The master branch is a gulp powered version, and the webpack branch is a webpack powered version. The webpack version is the more user-friendly and stable of the two. The webpack version makes extensive use of the <a href=\"https://github.com/mwilkins91/onbrand-utilityfunctions\">Onbrand Utility Functions</a> Library. </p> <a href=\"https://github.com/mwilkins91/onbrand-localDev\" class=\"block\">Gulp: Github</a> <a href=\"https://github.com/mwilkins91/onbrand-localDev/tree/webpack\" class=\"block\">Webpack: Github</a> <a href=\"https://github.com/mwilkins91/onbrandTemplate-Nick\" class=\"block\">Original (Nick Roamer): Github</a> </div> </li> <li id=\"onbrandProjectGenerator-repositories\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Project Generator</h4> <p class=\"content\"> This is the repository for the program which runs on cihost when you use the command \"generate\". It builds projects based on what is in it's \"templates\" folder, which is typically the frameworks found in the <a href=\"https://github.com/mwilkins91/onbrand-generator\">local development frameworks</a>. </p> <a href=\"https://github.com/mwilkins91/onbrand-generator\" class=\"block\">Github</a> </div> </li> <li id=\"onbrandSlackBot-repositories\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Slack Bot</h4> <p class=\"content\"> This is the repository for the onbrand Slackbot, which announces the fire marshal every morning, and it's associated website. The repo is set to private to protect the api-keys. </p> <a href=\"https://github.com/mwilkins91/onbrand-firemarshal\" class=\"block\">Github</a> <a href=\"http://cihost.uberflip.com/fire/\" class=\"block\">Scheduling Website</a> </div> </li> </ul> </article> <article id=\"npmPage\" style=\"display:none\" class=\"content cardsList\"> <ul> <li id=\"onbrandAssetObtainer-npmPage\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Asset Obtainer</h4> <p class=\"content\"> The repository for the program typically run via the \"steal\" command. Used to grab all styles from a particular website, and save them in the appropriate order in your client.scss. It also attempts to prevent conflits by namespacing. </p> <a href=\"https://www.npmjs.com/package/onbrand-steal\" class=\"block\">NPM</a> </div> </li> <li id=\"onbrandUtilityFunctions-npmPage\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Utility Functions</h4> <p class=\"content\"> The repository for the library which houses various reusable fuctions that make Onbranding a hub much easier, and eliminates various bugs. Also contains various SCSS functions. </p> <a href=\"https://www.npmjs.com/package/onbrandutilityfunctions\" class=\"block\">NPM</a> </div> </li> <li id=\"onbrandProjectGenerator-npmPage\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Project Generator</h4> <p class=\"content\"> This is the repository for the program which runs on cihost when you use the command \"generate\". It builds projects based on what is in it's \"templates\" folder, which is typically the frameworks found in the <a href=\"https://github.com/mwilkins91/onbrand-generator\">local development frameworks</a>. </p> <a href=\"https://www.npmjs.com/package/onbrand-project-generator\" class=\"block\">NPM</a> </div> </li> </ul> </article> <article id=\"docs\" style=\"display:none\" class=\"content cardsList\"> <ul> <li class=\"card\"> <div id=\"onbrandAssetObtainer-docs\" class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Asset Obtainer</h4> <p class=\"content\"> The repository for the program typically run via the \"steal\" command. Used to grab all styles from a particular website, and save them in the appropriate order in your client.scss. It also attempts to prevent conflits by namespacing. </p> <p class=\"title is-5\">How it works:</p> <p class=\"title is-6\">The main initialization function:</p> <pre><code class=\"language-javascript\">\nasync function init() {\n    let confirmation = await checkLocation().catch(err =>\n        logError(err, 'checkLocation')\n    );\n    if (confirmation) {\n        const progressBar = new cliProgress.Bar(\n            {},\n            cliProgress.Presets.shades_classic\n        );\n        let url = await getinfo().catch(err => logError(err, 'getInfo'));\n        progressBar.start(100, 0);\n        progressBar.update(10);\n        let assets = await launchBrowser(url).catch(err =>\n            logError(err, 'launchBrowser')\n        );\n        progressBar.update(35);\n        let clientCss = await getCSS(assets.stylesheet).catch(err =>\n            logError(err, 'getCss')\n        );\n        progressBar.update(75);\n        let bundledCss = bundleCss(clientCss, assets.inlineStyles);\n        progressBar.update(85);\n        printCss(bundledCss, progressBar);\n    }\n}\n                                    </code></pre> <p>Can be broken down as follows:</p> <ol> <li> <p>A user enter's <code>generate</code> in thier terminal.</p> </li> <li> <p>A check is done to ensure we are in an onbrand folder. We are. <a href=\"https://www.npmjs.com/package/inquirer\"> <code>Inquirer</code> </a> is used to prompt the user for confirmation of their intent (to overwrite their client.scss). User confirms.</p> <pre><code class=\"language-javascript\">\nlet confirmation = await checkLocation().catch(err =>\n    logError(err, 'checkLocation')\n);\n                                                            </code></pre> </li> <li> <p> <a href=\"https://www.npmjs.com/package/inquirer\"> <code>Inquirer</code> </a> is used to prompt the user for a URL. </p> <pre><code class=\"language-javascript\">\nlet url = await getinfo().catch(err => logError(err, 'getInfo'));\n                                                </code></pre> </li> <li> <p> <a href=\"https://www.npmjs.com/package/puppeteer\"> <code>Pupetteer</code> </a> initiates, and navigates to the URL provided. A record is kept of all external requests made by the webpage. <a href=\"https://www.npmjs.com/package/puppeteer\"> <code>Pupetteer</code> </a> also executes JS on the page to grab all inline styles from the page.</p> <pre><code class=\"language-javascript\">\nlet assets = await launchBrowser(url).catch(err =>\n    logError(err, 'launchBrowser')\n);\n                                                 </code></pre> </li> <li> <p>All style sheets are then requested by us, and concatinated together in the appropriate order. </p> <pre><code class=\"language-javascript\">\nlet clientCss = await getCSS(assets.stylesheet).catch(err =>\n    logError(err, 'getCss')\n);\nlet bundledCss = bundleCss(clientCss, assets.inlineStyles);\n                                               </code></pre> </li> <li> <p>We use Node's file system module to write the file to disk.</p> <pre><code class=\"language-javascript\">\nprintCss(bundledCss, progressBar);\n                                                                                                   </code></pre> <p>The progress bar in the CLI is updated with these function calls:</p> <pre><code class=\"language-javascript\">\nprogressBar.update(85);\n                                            </code></pre> <p>While this is usefull to let the user know how far along the process is, it is also helpful for debugging. If an error is thrown or the process stalls at a certain percentage, you will know to look at the code following that particular percentage's function call. </p> </li> </ol> </div> </li> <li id=\"onbrandUtilityFunctions-docs\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Utility Functions</h4> <p class=\"content\"> The repository for the library which houses various reusable fuctions that make Onbranding a hub much easier, and eliminates various bugs. It also contains various SCSS functions. </p> <a href=\"http://cihost.uberflip.com/docs/\" class=\"block\">Auto-generated Documentation</a> <p class=\"title is-5\">A Short list of available functions, with descriptions and use-cases:</p> <ul> <li> <p> <a href=\"http://cihost.uberflip.com/docs/#getstreamclass\">getStreamClass</a> simply returns the current page's stream class, or false if it doesn't have one.</p> <pre><code class=\"language-javascript\">\nconst stream = getStreamClass();\nconsole.log(stream) // 'stream-xxxxxx' or false\n                                                                                                        </code></pre> </li> <li> <p> <a href=\"http://cihost.uberflip.com/docs/#recoenginepositioning\">recoEnginePositioning</a> will make the reco engine sticky to whatever selector you supply this function. This prevents the default \"glitchy\" behaviour, which leaves a gap on scroll, and helps make the injected-header look more natural. </p> <pre><code class=\"language-javascript\">\nHubs.Events.on('scroll', function(){\n    recoEnginePositioning('.top-nav'); // keep the reco engine with the top-nav \n})                                     // until it hits the top of the page.\n                                                                                                            </code></pre> </li> <li> <p> <a href=\"http://cihost.uberflip.com/docs/#doiftag\" class=\"bold\">doIfTag</a> & <a href=\"http://cihost.uberflip.com/docs/#doiftagregex\" class=\"bold\">doIfTagRegex</a> are functions to apply logic based on the pressence of a tag on a tile. It is possible these two functions could be combined into one smarter function. They each take a \"tag\" as the first argument, as either a string or a regular expression. the second and thrid arguments are functions you supply to execute if the tag was preasent or not. EX: </p> <pre><code class=\"language-javascript\">\ndoIfTag('tagName', function(){\n    // turn the label of all tiles tagged with \"tagName\" to \"I'm tagged!\"\n    $(this).find('a.view').text('I\\'m tagged!');\n}, function(){\n    //remove all tiles that do not have the tag \"tagName\"\n    $(this).remove();\n})\n                                                    </code></pre> <p>Additionally, if you need to ensure that your code is not run more than once per tile (maybe you're calling it on loadAdditionalItems?) you can provide an additional argument, which is a string representing a class to exclude from the loop. EX: </p> <pre><code class=\"language-javascript\">\ndoIfTag('tagName', function(){\n    // turn the label of all tiles tagged with \"tagName\" to \"I'm tagged!\"\n    $(this).find('a.view').text('I\\'m tagged!');\n\n    // we add 'someClassName' so that this function\n    // won't fire on this tile again.\n    $(this).addClass('someClassName');\n}, function(){\n    //remove all tiles that do not have the tag \"tagName\"\n    $(this).remove();\n\n    // we add 'someClassName' so that this function\n    // won't fire on this tile again.\n    $(this).addClass('someClassName');\n}, 'someClassName') // we pass 'someClassName' as the last \n                    // argument, telling doIfTag not to run on \n                    // any tile with this class.\n                                             </code></pre> <p> <a href=\"http://cihost.uberflip.com/docs/#doiftag\" class=\"bold\">removeClasses</a> will recursively remove any and all removeClasse from an element and its children. This allows you to completely customize certain hub elements, such as the top nav. </p> <pre><code class=\"language-javascript\">\n// create a new top-nav clone, with no classes!\nlet $topNav = $('.top-nav');\nlet $sideNav = $topNav.clone();\n$sideNav\n    .attr('class', 'onbrandNav')\n    .children()\n    .each(removeClasses);\n\n                                                        </code></pre> </li> </ul> </div> </li> <li id=\"onbrandLocalDevelopmentFrameworks-docs\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">The Webpack Framework</h4> <p class=\"content\"> The local development framework which uses webpack for its build process, as well as browsersync for its hub-proxy. </p> <p class=\"title is-5\">Getting the hub local:</p> <p class=\"is-6\">Getting the hub proxied onto a local machine was easy, but getting it to work right was tricky. Here is a brief explaination of how it works. </p> <ul> <li> <p> <span class=\"bold\">The development server:</span> The server is actually a webpack server, proxying the hub, and a browsersync server proxying the webpack server. This is done to get the best of both worlds. Webpack is substantially faster at building when running a server, as it will store and serve assets from memory rather than the harddrive. Browsersync makes it easy to auto-reload/inject changed styles, and to serve your local content to other devices on the same network. This lets us show coachs our work, or test on mobile devices.</p> <pre><code class=\"language-javascript\">\nfunction browserSyncInit() {\n    browserSync({\n        proxy: {\n            target: devOptions.fullHubUrl\n        },\n        serveStatic: ['.'],\n        files: [\n            './build/**/*.js',\n            './build/**/*.css',\n            './build/**/*.map',\n            './includes/**/*.html'\n        ]\n    });\n    browserSyncOn = true;\n}\n                                                     </code></pre> </li> <li> <p> <span class=\"bold\">Page Changes:</span> The hub is a single page application, which means it does not actually change pages when you click a link. Instead, it manipulates browser history and the content of the page with javascript. When proxied, none of this works. </p> <p>To get our local environment's page changes working right, the <a href=\"http://cihost.uberflip.com/docs/#_relativelinks\">_relativelinks</a> and <a href=\"http://cihost.uberflip.com/docs/#_internallink\">_internallink</a> are used. These functions deconstruct all links on every page of a locally hosted hub, and remove all the javascript accociated with them. They then add in javascript to change the page on click, and manually trigger the on page change event. This means for an outside observer, the hub appears to work almost exactly the same as a live hub, but really it is performing a full page load instead of ajaxing in the new page. Importantly however, the code you write for pageChanges behaves as it would in live, allowing us to develop normally.</p> <p>These two functions rely on user inputs from the \"dev-options\" file in each project. The functions look for links to modify, and they identify the correct links based on what was inputed for the url in dev-options: </p> <pre><code class=\"language-javascript\">\nconst devOptions = {\n    shortHubUrl: 'resources.digitalshadows.com/', //⬅ This is important\n    fullHubUrl: 'https://resources.digitalshadows.com/' + '?onbrand', //⬅ This is important\n    cihostFolder: 'digitalshadows', \n    remindMeToGit: true,\n    notifyOnBuildSuccess: false \n};\n\n\nmodule.exports = devOptions;\n\n                                            </code></pre> </li> <li> <p> <span class=\"bold\">The Snippets:</span> Getting the hub to load in local assets is as simple as using a relative path on the links you add to the backend of the hub. Changing the links back and forth to switch from local to production was a big hassle though, so using some simple conditionals and a query string, we teach the hub how to tell where to look for it's onbrand files: </p> <pre><code class=\"language-html\">\n&lt;style&gt;\n/** =-=-= DEVELOPMENT =-=-= **/\n/** \n    *  onBrand CSS &ndash; WARNING: Do not remove code block below.\n    */\n&lt;/style&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css&quot;&gt;\n&lt;script&gt;\n        var url = window.location.href;\n    window.hasOnbrand = false;\n\n    if (url.indexOf('?onbrand') != -1) {\n        window.hasOnbrand = true;\n    } else if (url.indexOf('&amp;onbrand') != -1) {\n        window.hasOnbrand = true;\n    } else {\n        window.hasOnbrand = false;\n    }\n&lt;/script&gt;\n&lt;script id=&quot;onbrand__styles--script&quot;&gt;//&lt;![CDATA[\n    if(window.hasOnbrand){\n            document.write(&quot;&lt;link id=\\&quot;onbrand__styles\\&quot; rel=\\&quot;stylesheet\\&quot; href=\\&quot;\\/build/style.css\\&quot;&gt;&quot;);\n    } else {\n        document.write(&quot;&lt;link id=\\&quot;onbrand__styles\\&quot; rel=\\&quot;stylesheet\\&quot; href=\\&quot;\\/\\/cihost.uberflip.com/${cihostFolder}/build/style.css\\&quot;&gt;&quot;);\n    }\n//]]&gt;&lt;/script&gt;\n&lt;style&gt;\n/* Add your CSS rules below */\n&lt;/style&gt;\n                                            </code></pre> <p>The above code snippet is in the head of the document, ensuring that we can check at any point of the document which file we should load. Then, we simply either load a asset from cihost, or one from our local machine (relative path). </p> </li> <li> <p> <span class=\"bold\">The Rest:</span> the rest of the webpack build is build related - the config uses sass-loader and post-css for our styles, and babel for our JS. The folder structure is based on Nick Roamer's build for familiariy.</p> </li> </ul> </div> </li> <li id=\"onbrandProjectGenerator-docs\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Project Generator</h4> <p class=\"content\"> This is the repository for the program which runs on cihost when you use the command \"generate\". It builds projects based on what is in it's \"templates\" folder, which is typically the frameworks found in the various branches of the <a href=\"https://github.com/mwilkins91/onbrand-localDev\">local development frameworks repository</a>. </p><p class=\"title is-5\">How it works:</p> <ol> <li> <p>Using <a href=\"https://www.npmjs.com/package/inquirer\"> <code>Inquirer</code> </a> we prompt the user to provide us with a project name, which will become both the folder's name once generated, and be included in dev-options.js as a refference to cihost.</p> </li> <li> <p>Using </p><p>Using <a href=\"https://www.npmjs.com/package/inquirer\"> <code>Inquirer</code> </a> we prompt the user to select, from a list, which framework they would like to build their project from.</p> <p>These projects are read from the folders contained within the \"templates\" folder, using node's file system module.</p> </li> <li> <p> With the project template selected, node will recursivley copy all files from that template folder into the new directory, making slight changes where needed. For instance, the dev-options and gitignore files will be altered - the former with the specific folder on cihost to pull files from, the latter changing its file type. </p> </li> <li> <p> Using <a href=\"https://www.npmjs.com/package/simple-git\"> <code>simple-git</code> </a> we iniialize a repository, and make an initial commit. </p> </li> <li> <p>Using <a href=\"https://www.npmjs.com/package/request\"> <code>request</code> </a> we make a post request to the gitlab api and create our remote repository</p> </li> <li> <p> Using <a href=\"https://www.npmjs.com/package/simple-git\"> <code>simple-git</code> we then link our local repo to the remote, and push our commit. </a></p> </li> </ol> <p></p> </div> </li> <li id=\"onbrandSlackBot-docs\" class=\"card\"> <div class=\"card-content\"> <h4 class=\"title is-3\">Onbrand Slack Bot</h4> <p class=\"content\"> This is the repository for the onbrand Slackbot, which announces the fire marshal every morning, and it's associated website. The repo is set to private to protect the api-keys. </p> <p class=\"title is-5\">How it works:</p> <ul> <li> <p>Using <a href=\"https://www.npmjs.com/package/firebase-admin\"> <code>firebase</code> </a> we store data about the possible users, and which users are scheduled on what day</p> </li> <li> <p>Using <a href=\"https://www.npmjs.com/package/slackbots\"> <code>slackbots</code> </a> and <a href=\"https://www.npmjs.com/package/node-cron\"> <code>node-cron</code> </a> we check who is scheduled for the day on firebase, then announce it to the success-team slack channel</p> </li> <li> <p>Using <a href=\"https://www.npmjs.com/package/botkit\"> <code>botkit</code> we listen for messages to our slackbot, and respond. The logic for responses as of the time of writting this is as follows:</a> </p> <pre><code class=\"language-javascript\">\nexports.messageHandler = function() {\n    fireBot_botkit.hears(\n        ['hello', 'hey', 'hi', 'howdy', 'yo'],\n        ['direct_message', 'direct_mention', 'mention'],\n        function(bot, message) {\n            bot.reply(message, 'Hi there. ');\n        }\n    );\n    fireBot_botkit.hears(\n        ['who', 'firefighter?', 'who is the firefighter?', 'who is the firefighter'],\n        ['direct_message', 'direct_mention', 'mention'],\n        async function(bot, message) {\n            try {\n                const {\n                    users,\n                    schedule,\n                    assignedPersonId,\n                    todaysFirefighter\n                } = await getAssignedPerson();\n                console.log(message);\n                bot.reply(message, `${todaysFirefighter.name} is the firefighter today.`);\n            } catch (err) {\n                console.log(err);\n            }\n        }\n    );\n    fireBot_botkit.hears(\n        'gossip',\n        ['direct_message', 'direct_mention', 'mention'],\n        function(bot, message) {\n            bot.reply(\n                message,\n                'I hear MarkBot might really be a dog in a robot suit. Shhhh...'\n            );\n        }\n    );\n    fireBot_botkit.hears(\n        'say something',\n        ['direct_message', 'direct_mention', 'mention'],\n        function(bot, message) {\n            bot.reply(message, 'something.');\n        }\n    );\n};\n                                                </code></pre> <p>The functionality and specificity of replies can be easily modified and improved my editing these functions.</p> </li> <li> <p>The firemarshal runs on a dokku powered docker container on Mark's personal server.</p> </li> <li> <p>The firebase data that powers the slackbot can be editied at <a href=\"http://cihost.uberflip.com/fire/\">http://cihost.uberflip.com/fire/</a> </p> </li> </ul> </div> </li> </ul> </article> <article id=\"newOBProj\" class=\"content cardsList\"> <h2 class=\"title is-3\">How to Onbrand a Project with the Webpack build:</h2> <p>Written: <date>Thursday, Feb 15th 2018</date> </p> <ol> <li class=\"box box--list\"> <p>First things first, we need to spin up a new project.</p> <p>To do this, ssh into cihost by running <code>ssh onbrandserver.uberflip.com</code> in your terminal.</p> <p> <strong>Note:</strong> Before being allowed to ssh, you will need Miles/Ops to add your ssh key to the server. Otherwise, you will be denied access.</p> </li> <li class=\"box box--list\"> <p>Once you are on cihost, run the command <code>generate</code> while in the <code>/home/newuberflip/cihost</code> directory. (use <code>pwd</code> to verify.)</p> </li> <li class=\"box box--list\"> <p>Follow the prompts given to you by the generate command:</p> <p> <strong>Project name:</strong> The string provided to project name will become the name of the folder and the git repo, so it is adivsable to use camel case.</p> <p> <strong>Template:</strong> For this tutorial, we will be using webpack. Select <code>onbrand-webpack</code> as your template.</p> </li> <li class=\"box box--list\"> <p>Allow the program to complete, then take note of the git url that is provided to you at the end. </p> </li> <li class=\"box box--list\"> <p>Once the files have been generated, copy the gitlab url and exit cihost by typing <code>exit</code> in your terminal. You should now be back on your own local terminal.</p> </li> <li class=\"box box--list\"> <p>Navigate to your preffered folder for housing projects on your local terminal. Once there, run <code>git clone {url}</code> where {url} is replaced with the url you obtained from the generator.</p> </li> <li class=\"box box--list\"> <p>Once the files have been cloned from git, navigate inside and run <code>npm install</code> on your terminal.</p> </li> <li class=\"box box--list\"> <p>After everything is installed, we can open up that project folder in our favorite code editor and open the <code>dev-options.js</code> rile. Here, we can customize a few options, but importantly we should change the fullUrl and shortUrl values to match the hub we will be working on.</p> </li> <li class=\"box box--list\"> <p>Once all our settings are ready, we can start the project with the <code>npm run dev</code> command in our terminal. This should kickstart webpack and browsersync, and your project should open in a browser. But you will notice your code doesn't work yet! This is because we have <em>one</em> more step to do for our setup. </p> </li> <li class=\"box box--list\"> <p>Open the <code>readme.md</code> file from your project, and note the various snippets there. You should see one for HTML, one for CSS, and one for JS. We will need to copy each one of these into the custom code area of the hub we will be working on. Open <code>https://app.uberflip.com/</code> and navigate to the hub you will be working on (the same one you included in dev-options).</p> <p>Once there, go to appearence, then custom code. Ensure custom code is turned on by checking the check box at the top of the page, then paste in each snippet to its appropriate place. </p> </li> <li class=\"box box--list\"> <p>Now, refresh the browsersync page and you should see a blue hub - ready to go!</p> </li> <li class=\"box box--list\"> <p>If you are integrating a client's header/footer from an existing site <a href=\"https://www.npmjs.com/package/onbrand-steal\">steal</a> will probably help you. After installing it, you can run the command <code>steal</code> in your terminal (when in an onbrand project folder) and enter the URL of a site to grab all of its CSS. Then, once you extract the html from their site with dev tools, and fix up any webpack errors from their code, you should be just about done!</p> </li> </ol> </article> <article id=\"updateTemplate\" class=\"content cardsList\"> <h2 class=\"title is-3\">How to Update a Project Tempalte:</h2> <p>Written: <date>Thursday, Feb 15th 2018</date> </p> <ol> <li class=\"box box--list\"> <p>To update an existing template, you must first clone down the repo and make your changes.</p> </li> <li class=\"box box--list\"> <p>Once you have modified the repository, make your commits and push the changes back up to git. </p> </li> <li class=\"box box--list\"> <p>Next, you will need to clone down the <a href=\"https://github.com/mwilkins91/onbrand-generator\">generator repo</a>.</p> </li> <li class=\"box box--list\"> <p>Navigate to the templates folder, and note that it is empty. Here you will clone down any and all repositories that you wish to become templates.</p> </li> <li class=\"box box--list\"> <p>Now, simply navigate back to the root of th generator reposityory and run <code>npm version {type}</code> where {type} is either \"major\" \"minor\" or \"patch\". You can read more about what the difference is <a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\">here</a>. Typically you will be doing a patch.</p> <p>Next, we will publish our changes to NPM by running <code>npm publish</code>.</p> </li> <li class=\"box box--list\"> <p>With our newest version now ready, we need to put in a ticket to Miles/Ops to update the generator on cihost. We simply need to ask them to run the command <code>sudo npm install onbrand-project-generator -g</code>, and once that is done the new templates will be available whenever someone calls <code>generate</code>. </p> </li> </ol> </article> <article id=\"updateUtilityFuncs\" class=\"content cardsList\"> <h2 class=\"title is-3\">How to The Onbrand Utility Functions Library:</h2> <p>Written: <date>Thursday, Feb 15th 2018</date> </p> <ol> <li class=\"box box--list\"> <p>To update the library, you must first clone down the repo and make your changes.</p> </li> <li class=\"box box--list\"> <p>Once you have modified the repository, make your commits and push the changes back up to git. </p> </li> <li class=\"box box--list\"> <p>Next, we will need to update NPM. Run <code>npm version {type}</code> where {type} is either \"major\" \"minor\" or \"patch\". You can read more about what the difference is <a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\">here</a>. Typically you will be doing a patch.</p> <p>Next, we will publish our changes to NPM by running <code>npm publish</code>.</p> </li> <li class=\"box box--list\"> <p>With our newest version now ready, we will need to update the <code>package.json</code> for the tempaltes that use our library if we performed a major or minor version update. If we only performed a patch, npm should pull down the latest version automatically. </p> <p>If you performed a major or minor update, follow the instructions <a href=\"#updateTemplate\" class=\"inPageLink\" data-for=\"updateTemplate\">here</a> next.</p> </li> </ol> </article> </main> </section> </div> </section> <script src=\"/dist/marksOnbrandStuff.js\"></script> </body> </html>"},"hash":"78060419a88d669fdadd202c8e064583","cacheData":{}}